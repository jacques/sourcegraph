/*
Sourcegraph

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlobInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlobInfo{}

// BlobInfo struct for BlobInfo
type BlobInfo struct {
	Path string `json:"path"`
	Repository RepositoryInfo `json:"repository"`
	Commit CommitInfo `json:"commit"`
	Url string `json:"url"`
}

type _BlobInfo BlobInfo

// NewBlobInfo instantiates a new BlobInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobInfo(path string, repository RepositoryInfo, commit CommitInfo, url string) *BlobInfo {
	this := BlobInfo{}
	this.Path = path
	this.Repository = repository
	this.Commit = commit
	this.Url = url
	return &this
}

// NewBlobInfoWithDefaults instantiates a new BlobInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobInfoWithDefaults() *BlobInfo {
	this := BlobInfo{}
	return &this
}

// GetPath returns the Path field value
func (o *BlobInfo) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *BlobInfo) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *BlobInfo) SetPath(v string) {
	o.Path = v
}

// GetRepository returns the Repository field value
func (o *BlobInfo) GetRepository() RepositoryInfo {
	if o == nil {
		var ret RepositoryInfo
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *BlobInfo) GetRepositoryOk() (*RepositoryInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *BlobInfo) SetRepository(v RepositoryInfo) {
	o.Repository = v
}

// GetCommit returns the Commit field value
func (o *BlobInfo) GetCommit() CommitInfo {
	if o == nil {
		var ret CommitInfo
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *BlobInfo) GetCommitOk() (*CommitInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *BlobInfo) SetCommit(v CommitInfo) {
	o.Commit = v
}

// GetUrl returns the Url field value
func (o *BlobInfo) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *BlobInfo) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *BlobInfo) SetUrl(v string) {
	o.Url = v
}

func (o BlobInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlobInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	toSerialize["repository"] = o.Repository
	toSerialize["commit"] = o.Commit
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *BlobInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"repository",
		"commit",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlobInfo := _BlobInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlobInfo)

	if err != nil {
		return err
	}

	*o = BlobInfo(varBlobInfo)

	return err
}

type NullableBlobInfo struct {
	value *BlobInfo
	isSet bool
}

func (v NullableBlobInfo) Get() *BlobInfo {
	return v.value
}

func (v *NullableBlobInfo) Set(val *BlobInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobInfo(val *BlobInfo) *NullableBlobInfo {
	return &NullableBlobInfo{value: val, isSet: true}
}

func (v NullableBlobInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
