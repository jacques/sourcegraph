/*
Sourcegraph

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommitInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitInfo{}

// CommitInfo struct for CommitInfo
type CommitInfo struct {
	Oid string `json:"oid"`
}

type _CommitInfo CommitInfo

// NewCommitInfo instantiates a new CommitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitInfo(oid string) *CommitInfo {
	this := CommitInfo{}
	this.Oid = oid
	return &this
}

// NewCommitInfoWithDefaults instantiates a new CommitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitInfoWithDefaults() *CommitInfo {
	this := CommitInfo{}
	return &this
}

// GetOid returns the Oid field value
func (o *CommitInfo) GetOid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Oid
}

// GetOidOk returns a tuple with the Oid field value
// and a boolean to check if the value has been set.
func (o *CommitInfo) GetOidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oid, true
}

// SetOid sets field value
func (o *CommitInfo) SetOid(v string) {
	o.Oid = v
}

func (o CommitInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["oid"] = o.Oid
	return toSerialize, nil
}

func (o *CommitInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"oid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitInfo := _CommitInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitInfo)

	if err != nil {
		return err
	}

	*o = CommitInfo(varCommitInfo)

	return err
}

type NullableCommitInfo struct {
	value *CommitInfo
	isSet bool
}

func (v NullableCommitInfo) Get() *CommitInfo {
	return v.value
}

func (v *NullableCommitInfo) Set(val *CommitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitInfo(val *CommitInfo) *NullableCommitInfo {
	return &NullableCommitInfo{value: val, isSet: true}
}

func (v NullableCommitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
