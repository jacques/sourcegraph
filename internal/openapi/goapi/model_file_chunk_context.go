/*
Sourcegraph

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileChunkContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileChunkContext{}

// FileChunkContext struct for FileChunkContext
type FileChunkContext struct {
	Blob BlobInfo `json:"blob"`
	StartLine int32 `json:"startLine"`
	EndLine int32 `json:"endLine"`
	ChunkContent string `json:"chunkContent"`
}

type _FileChunkContext FileChunkContext

// NewFileChunkContext instantiates a new FileChunkContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileChunkContext(blob BlobInfo, startLine int32, endLine int32, chunkContent string) *FileChunkContext {
	this := FileChunkContext{}
	this.Blob = blob
	this.StartLine = startLine
	this.EndLine = endLine
	this.ChunkContent = chunkContent
	return &this
}

// NewFileChunkContextWithDefaults instantiates a new FileChunkContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileChunkContextWithDefaults() *FileChunkContext {
	this := FileChunkContext{}
	return &this
}

// GetBlob returns the Blob field value
func (o *FileChunkContext) GetBlob() BlobInfo {
	if o == nil {
		var ret BlobInfo
		return ret
	}

	return o.Blob
}

// GetBlobOk returns a tuple with the Blob field value
// and a boolean to check if the value has been set.
func (o *FileChunkContext) GetBlobOk() (*BlobInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blob, true
}

// SetBlob sets field value
func (o *FileChunkContext) SetBlob(v BlobInfo) {
	o.Blob = v
}

// GetStartLine returns the StartLine field value
func (o *FileChunkContext) GetStartLine() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartLine
}

// GetStartLineOk returns a tuple with the StartLine field value
// and a boolean to check if the value has been set.
func (o *FileChunkContext) GetStartLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartLine, true
}

// SetStartLine sets field value
func (o *FileChunkContext) SetStartLine(v int32) {
	o.StartLine = v
}

// GetEndLine returns the EndLine field value
func (o *FileChunkContext) GetEndLine() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndLine
}

// GetEndLineOk returns a tuple with the EndLine field value
// and a boolean to check if the value has been set.
func (o *FileChunkContext) GetEndLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndLine, true
}

// SetEndLine sets field value
func (o *FileChunkContext) SetEndLine(v int32) {
	o.EndLine = v
}

// GetChunkContent returns the ChunkContent field value
func (o *FileChunkContext) GetChunkContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChunkContent
}

// GetChunkContentOk returns a tuple with the ChunkContent field value
// and a boolean to check if the value has been set.
func (o *FileChunkContext) GetChunkContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChunkContent, true
}

// SetChunkContent sets field value
func (o *FileChunkContext) SetChunkContent(v string) {
	o.ChunkContent = v
}

func (o FileChunkContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileChunkContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blob"] = o.Blob
	toSerialize["startLine"] = o.StartLine
	toSerialize["endLine"] = o.EndLine
	toSerialize["chunkContent"] = o.ChunkContent
	return toSerialize, nil
}

func (o *FileChunkContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blob",
		"startLine",
		"endLine",
		"chunkContent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileChunkContext := _FileChunkContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileChunkContext)

	if err != nil {
		return err
	}

	*o = FileChunkContext(varFileChunkContext)

	return err
}

type NullableFileChunkContext struct {
	value *FileChunkContext
	isSet bool
}

func (v NullableFileChunkContext) Get() *FileChunkContext {
	return v.value
}

func (v *NullableFileChunkContext) Set(val *FileChunkContext) {
	v.value = val
	v.isSet = true
}

func (v NullableFileChunkContext) IsSet() bool {
	return v.isSet
}

func (v *NullableFileChunkContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileChunkContext(val *FileChunkContext) *NullableFileChunkContext {
	return &NullableFileChunkContext{value: val, isSet: true}
}

func (v NullableFileChunkContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileChunkContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
