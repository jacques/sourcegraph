// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package licensecheck

import (
	"context"
	"sync"

	connect "connectrpc.com/connect"
	v1 "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/subscriptionlicensechecks/v1"
	v1connect "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/subscriptionlicensechecks/v1/v1connect"
)

// MockSubscriptionLicenseChecksServiceClient is a mock implementation of
// the SubscriptionLicenseChecksServiceClient interface (from the package
// github.com/sourcegraph/sourcegraph/lib/enterpriseportal/subscriptionlicensechecks/v1/v1connect)
// used for unit testing.
type MockSubscriptionLicenseChecksServiceClient struct {
	// CheckLicenseKeyFunc is an instance of a mock function object
	// controlling the behavior of the method CheckLicenseKey.
	CheckLicenseKeyFunc *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc
}

// NewMockSubscriptionLicenseChecksServiceClient creates a new mock of the
// SubscriptionLicenseChecksServiceClient interface. All methods return zero
// values for all results, unless overwritten.
func NewMockSubscriptionLicenseChecksServiceClient() *MockSubscriptionLicenseChecksServiceClient {
	return &MockSubscriptionLicenseChecksServiceClient{
		CheckLicenseKeyFunc: &SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc{
			defaultHook: func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (r0 *connect.Response[v1.CheckLicenseKeyResponse], r1 error) {
				return
			},
		},
	}
}

// NewStrictMockSubscriptionLicenseChecksServiceClient creates a new mock of
// the SubscriptionLicenseChecksServiceClient interface. All methods panic
// on invocation, unless overwritten.
func NewStrictMockSubscriptionLicenseChecksServiceClient() *MockSubscriptionLicenseChecksServiceClient {
	return &MockSubscriptionLicenseChecksServiceClient{
		CheckLicenseKeyFunc: &SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc{
			defaultHook: func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error) {
				panic("unexpected invocation of MockSubscriptionLicenseChecksServiceClient.CheckLicenseKey")
			},
		},
	}
}

// NewMockSubscriptionLicenseChecksServiceClientFrom creates a new mock of
// the MockSubscriptionLicenseChecksServiceClient interface. All methods
// delegate to the given implementation, unless overwritten.
func NewMockSubscriptionLicenseChecksServiceClientFrom(i v1connect.SubscriptionLicenseChecksServiceClient) *MockSubscriptionLicenseChecksServiceClient {
	return &MockSubscriptionLicenseChecksServiceClient{
		CheckLicenseKeyFunc: &SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc{
			defaultHook: i.CheckLicenseKey,
		},
	}
}

// SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc describes the
// behavior when the CheckLicenseKey method of the parent
// MockSubscriptionLicenseChecksServiceClient instance is invoked.
type SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc struct {
	defaultHook func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error)
	hooks       []func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error)
	history     []SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall
	mutex       sync.Mutex
}

// CheckLicenseKey delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockSubscriptionLicenseChecksServiceClient) CheckLicenseKey(v0 context.Context, v1 *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error) {
	r0, r1 := m.CheckLicenseKeyFunc.nextHook()(v0, v1)
	m.CheckLicenseKeyFunc.appendCall(SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the CheckLicenseKey
// method of the parent MockSubscriptionLicenseChecksServiceClient instance
// is invoked and the hook queue is empty.
func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) SetDefaultHook(hook func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CheckLicenseKey method of the parent
// MockSubscriptionLicenseChecksServiceClient instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) PushHook(hook func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) SetDefaultReturn(r0 *connect.Response[v1.CheckLicenseKeyResponse], r1 error) {
	f.SetDefaultHook(func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) PushReturn(r0 *connect.Response[v1.CheckLicenseKeyResponse], r1 error) {
	f.PushHook(func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error) {
		return r0, r1
	})
}

func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) nextHook() func(context.Context, *connect.Request[v1.CheckLicenseKeyRequest]) (*connect.Response[v1.CheckLicenseKeyResponse], error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) appendCall(r0 SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall objects
// describing the invocations of this function.
func (f *SubscriptionLicenseChecksServiceClientCheckLicenseKeyFunc) History() []SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall {
	f.mutex.Lock()
	history := make([]SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall is an
// object that describes an invocation of method CheckLicenseKey on an
// instance of MockSubscriptionLicenseChecksServiceClient.
type SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 *connect.Request[v1.CheckLicenseKeyRequest]
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *connect.Response[v1.CheckLicenseKeyResponse]
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c SubscriptionLicenseChecksServiceClientCheckLicenseKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
